<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ArduinoCommunicator</name>
    </assembly>
    <members>
        <member name="T:ArduinoCommunicator.BoardInfo">
            <summary>
            Retrieve information about the Arduino board.
            </summary>
        </member>
        <member name="M:ArduinoCommunicator.BoardInfo.#ctor">
            <summary>
            Creates a new instance for Arduino UNO.
            </summary>
        </member>
        <member name="M:ArduinoCommunicator.BoardInfo.#ctor(ArduinoCommunicator.BoardType)">
            <summary>
            Creates a news instance for the specific BoardType.
            </summary>
            <param name="board">Board type to retrieve its information.</param>
        </member>
        <member name="P:ArduinoCommunicator.BoardInfo.BoardName">
            <summary>
            Board type of this instance.
            </summary>
        </member>
        <member name="P:ArduinoCommunicator.BoardInfo.NumberOfAnalogInputPins">
            <summary>
            Number of analog input pins (usually denoted by 'ANALOG IN' on the board)
            </summary>
        </member>
        <member name="P:ArduinoCommunicator.BoardInfo.AnalogOutPins">
            <summary>
            List of analog (PWM) output pins (usually denoted by a ~ sign next to the pin number on the board)
            </summary>
        </member>
        <member name="P:ArduinoCommunicator.BoardInfo.NumberOfDigitalPins">
            <summary>
            Number of digital pins (usually denoted by 'DIGITAL' on the board)
            </summary>
        </member>
        <member name="T:ArduinoCommunicator.BoardType">
            <summary>
            Board type (UNO, DUE, ...)
            </summary>
        </member>
        <member name="F:ArduinoCommunicator.BoardType.UNO">
            <summary>
            Arduino UNO board
            </summary>
        </member>
        <member name="T:ArduinoCommunicator.Arduino">
            <summary>
            Holds state of the Arduino board
            </summary>
        </member>
        <member name="M:ArduinoCommunicator.Arduino.#ctor(ArduinoCommunicator.BoardType,SerialPortNET.SerialPort)">
            <summary>
            Creates a new instance of Arduino board with the specified board type and connects to it on the serialPort.
            </summary>
            <param name="board">Arduino board type</param>
            <param name="serialPort">Serial port to which the Arduino is connected</param>
            <exception cref="T:System.IO.IOException">Throws IOException if connection fails.</exception>
        </member>
        <member name="M:ArduinoCommunicator.Arduino.#ctor(ArduinoCommunicator.BoardType)">
            <summary>
            Creates a new instance of Arduino board with the specified board type, and automatically connects.
            </summary>
            <param name="board">Arduino board name</param>
            <exception cref="T:System.IO.IOException">Throws IOException if connection fails.</exception>
        </member>
        <member name="M:ArduinoCommunicator.Arduino.analogRead(System.Int32)">
            <summary>
            Read the analog value on pinNumber. If an error occurs, it will return the previously successfully read number, or zero if no successful previous analogRead operation.
            </summary>
            <param name="pinNumber">Number of analog pin to read from (Usually written as A0, A1, ... on the board)</param>
            <returns>An integer value between 0 to 1023</returns>
        </member>
        <member name="M:ArduinoCommunicator.Arduino.analogWrite(System.Int32,System.Byte)">
            <summary>
            Writes to the analog pin.
            </summary>
            <param name="pinNumber"></param>
            <param name="value"></param>
        </member>
        <member name="M:ArduinoCommunicator.Arduino.digitalRead(System.Int32)">
            <summary>
            Reads digital value of the pin.
            </summary>
            <param name="pinNumber">Pin number to read its digital value.</param>
            <returns>DigitalValue read on the pin.</returns>
        </member>
        <member name="M:ArduinoCommunicator.Arduino.digitalWrite(System.Int32,ArduinoCommunicator.DigitalValue)">
            <summary>
            Writes digital value to the pin.
            </summary>
            <param name="pinNumber">Digital pin to write to.</param>
            <param name="value">Digital value to write to the pin.</param>
        </member>
        <member name="M:ArduinoCommunicator.Arduino.pinMode(System.Int32,ArduinoCommunicator.PinMode)">
            <summary>
            Sets pin mode.
            </summary>
            <param name="pinNumber">Pin number to set the mode on.</param>
            <param name="pinMode">Either PinMode.OUTPUT, PinMode.INPUT, or PinMode.INPUT_PULLUP</param>
        </member>
        <member name="M:ArduinoCommunicator.Arduino.Close">
            <summary>
            Close the connection.
            </summary>
        </member>
        <member name="P:ArduinoCommunicator.Arduino.BoardType">
            <summary>
            Board type of this instance 
            </summary>
        </member>
        <member name="P:ArduinoCommunicator.Arduino.IsConnected">
            <summary>
            True if instance is connected to Arduino board. False otherwise.
            </summary>
        </member>
        <member name="P:ArduinoCommunicator.Arduino.SerialPort">
            <summary>
            The serial port object that Arduino is connected to. Null if not connected.
            </summary>
        </member>
        <member name="T:ArduinoCommunicator.DigitalValue">
            <summary>
            Represents valid and invalid digital values (High, Low and Invalid)
            Implicitly casted to and from bool and int. 
            </summary>
        </member>
        <member name="M:ArduinoCommunicator.DigitalValue.op_Implicit(ArduinoCommunicator.DigitalValue)~System.Boolean">
            <summary>
            Returns true if digitalValue is High and false if it's Low or Invalid
            </summary>
            <param name="digitalValue"></param>
        </member>
        <member name="M:ArduinoCommunicator.DigitalValue.op_Implicit(ArduinoCommunicator.DigitalValue)~System.Byte">
            <summary>
            Returns true if digitalValue is 1 and 0 if it's Low or Invalid
            </summary>
            <param name="digitalValue"></param>
        </member>
        <member name="M:ArduinoCommunicator.DigitalValue.op_Implicit(System.Boolean)~ArduinoCommunicator.DigitalValue">
            <summary>
            Returns DigitalValue.High if true and DigitalValue.Low if false
            </summary>
            <param name="b">Boolean value to cast to DigitalValue</param>
        </member>
        <member name="M:ArduinoCommunicator.DigitalValue.op_Implicit(System.Int32)~ArduinoCommunicator.DigitalValue">
            <summary>
            Returns DigitalValue.High if i > 0 and DigitalValue.Low otherwise
            </summary>
            <param name="i">Integer value to cast to DigitalValue</param>
        </member>
        <member name="M:ArduinoCommunicator.DigitalValue.ToString">
            <summary>
            Returns High, Low or Invalid for respected values of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="F:ArduinoCommunicator.DigitalValue.High">
            <summary>
            Digital value High.
            </summary>
        </member>
        <member name="F:ArduinoCommunicator.DigitalValue.Invalid">
            <summary>
            Digital value invalid. Typically used for pins which values cannot be read.
            </summary>
        </member>
        <member name="F:ArduinoCommunicator.DigitalValue.Low">
            <summary>
            Digital value Low.
            </summary>
        </member>
        <member name="T:ArduinoCommunicator.PinMode">
            <summary>
            Represents pin mode 
            </summary>
        </member>
        <member name="F:ArduinoCommunicator.PinMode.INPUT">
            <summary>
            Digital input pin
            </summary>
        </member>
        <member name="F:ArduinoCommunicator.PinMode.OUTPUT">
            <summary>
            Digital output pin
            </summary>
        </member>
        <member name="F:ArduinoCommunicator.PinMode.INPUT_PULLUP">
            <summary>
            Digital input pin with a pull up resistor. Makes its default value High, unless externally grounded.
            </summary>
        </member>
        <member name="T:ArduinoCommunicator.SerialCommunicator">
            <summary>
            Communicates with Arduino.
            </summary>
        </member>
        <member name="M:ArduinoCommunicator.SerialCommunicator.#ctor(SerialPortNET.SerialPort)">
            <summary>
            Manually select Arduino port settings. Use it for multiple boards, or if you have changed Arduino connection settings.
            </summary>
            <param name="sp">Serial port to connect to</param>
        </member>
        <member name="M:ArduinoCommunicator.SerialCommunicator.#ctor">
            <summary>
            Automatically finds Arduino Board and connect to it
            </summary>
        </member>
        <member name="M:ArduinoCommunicator.SerialCommunicator.connect(SerialPortNET.SerialPort)">
            <summary>
            Connect to a serial port. If no arduino board is found, it would throw and IOException error.
            </summary>
            <param name="sp">SerialPortNET to connect to.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
            <summary>
            Used to enable extension methods for .Net 2.0 
            </summary>
        </member>
        <member name="T:SerialPortNET.SerialDataReceivedEventHandler">
            <summary>
            Represents the method that will handle the DataReceived event of a SerialPort object.
            </summary>
            <param name="sender">The sender of the event, which is the <see cref="T:SerialPortNET.SerialPort"/> object.</param>
            <param name="e">A <see cref="T:SerialPortNET.SerialDataReceivedEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="T:SerialPortNET.SerialDataReceivedEventArgs">
            <summary>
            Provides data for the <see cref="E:SerialPortNET.SerialPort.DataReceived"/> event.
            </summary>
        </member>
        <member name="P:SerialPortNET.SerialDataReceivedEventArgs.EventType">
            <summary>
            Gets or sets the event type.
            </summary>
        </member>
        <member name="T:SerialPortNET.SerialPort">
            <summary>
            Mono implementation of SerialPort is incomplete. This is to make up for that.
            </summary>
        </member>
        <member name="M:SerialPortNET.SerialPort.#ctor(System.String,System.Int32,SerialPortNET.Parity,System.Byte,SerialPortNET.StopBits)">
            <summary>
            Creates a new Serial Port
            </summary>
            <param name="portName">Name of the port (COM1, ...)</param>
            <param name="baudRate">Baud rate (9600, 115200, ...) </param>
            <param name="parity">Parity</param>
            <param name="dataBits">Number of data bits (7, 8, ...)</param>
            <param name="stopBits">Stop bits</param>
        </member>
        <member name="M:SerialPortNET.SerialPort.EnumerateSerialPorts">
            <summary>
            Enumerate all the serial ports and their respected device name by accessing the registry.
            </summary>
            <returns>A dictionary containing device names (e.g. USBSER000, Serial1, ...) and port names (e.g. COM1, COM20, ...), as keys and values respectively. </returns>
        </member>
        <member name="M:SerialPortNET.SerialPort.Close">
            <summary>
            Closes this serial port instance
            </summary>
        </member>
        <member name="M:SerialPortNET.SerialPort.Dispose">
            <summary>
            Called when this object is disposed
            </summary>
        </member>
        <member name="M:SerialPortNET.SerialPort.Open">
            <summary>
            Opens the port.
            </summary>
            <exception cref="T:System.IO.IOException">
            Raises IOException if cannot open port, or if some error happened during reading or writing port settings. Read the exception message to clarify.
            </exception>
        </member>
        <member name="M:SerialPortNET.SerialPort.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a number of bytes from the SerialPort input buffer and writes those bytes into a byte array at the specified offset.
            </summary>
            <param name="buffer">The byte array to write the input to. </param>
            <param name="offset">The offset in <paramref name="buffer"/> at which to write the bytes. </param>
            <param name="count">The maximum number of bytes to read. Fewer bytes are read if count is greater than the number of bytes in the input buffer. </param>
            <exception cref="T:System.IO.IOException">Raises IOException on failure. Read exception message to clarify.</exception>
        </member>
        <member name="M:SerialPortNET.SerialPort.ReadAll">
            <summary>
            Reads all bytes from the SerialPort input buffer.
            </summary>
            <returns>An array containing the read data</returns>
        </member>
        <member name="M:SerialPortNET.SerialPort.Run">
            <summary>
            Run asynchronous operation (if <see cref="F:SerialPortNET.SerialPort.Async"/> is set to True)
            </summary>
        </member>
        <member name="M:SerialPortNET.SerialPort.Stop">
            <summary>
            Stop the asynchronous operation (if running)
            </summary>
        </member>
        <member name="M:SerialPortNET.SerialPort.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a specified number of bytes to the serial port using data from a buffer.
            </summary>
            <param name="buffer">The byte array that contains the data to write to the port.</param>
            <param name="offset">The zero-based byte offset in the <paramref name="buffer"/> parameter at which to begin copying bytes to the port.</param>
            <param name="count">The number of bytes to write. </param>
        </member>
        <member name="M:SerialPortNET.SerialPort.WriteAll(System.Byte[])">
            <summary>
            Writes all bytes to the serial port.
            </summary>
            <param name="buffer">The byte array that contains the data to write to the port.</param>
        </member>
        <member name="M:SerialPortNET.SerialPort.Dispose(System.Boolean)">
            <summary>
            Gets called when this instance is disposed.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SerialPortNET.SerialPort.OnDataReceived">
            <summary>
            If <see cref="F:SerialPortNET.SerialPort.Async"/> is true, this method is called when new data is available in the input buffer of the serial port.
            </summary>
        </member>
        <member name="E:SerialPortNET.SerialPort.DataReceived">
            <summary>
            If <see cref="F:SerialPortNET.SerialPort.Async"/> is true, this event is raised when new data is available in the input buffer of the serial port.
            </summary>
        </member>
        <member name="P:SerialPortNET.SerialPort.BaudRate">
            <summary>
            Gets or sets the serial baud rate.
            </summary>
        </member>
        <member name="P:SerialPortNET.SerialPort.BytesToRead">
            <summary>
            Gets the number of bytes of data in the receive buffer.
            </summary>
        </member>
        <member name="P:SerialPortNET.SerialPort.BytesToWrite">
            <summary>
            Gets the number of bytes of data in the send buffer.
            </summary>
        </member>
        <member name="P:SerialPortNET.SerialPort.DataBits">
            <summary>
            Gets or sets the standard length of data bits per byte.
            </summary>
        </member>
        <member name="P:SerialPortNET.SerialPort.DtrControl">
            <summary>
            Gets or sets a value that enables the Data Terminal Ready (DTR) signal during serial communication.
            </summary>
        </member>
        <member name="P:SerialPortNET.SerialPort.IsOpen">
            <summary>
            Gets a value indicating the open or closed status of the <see cref="T:SerialPortNET.SerialPort"/> object.
            </summary>
        </member>
        <member name="P:SerialPortNET.SerialPort.IsRunning">
            <summary>
            Gets a value indicating the running status of the <see cref="T:SerialPortNET.SerialPort"/> object.
            </summary>
        </member>
        <member name="P:SerialPortNET.SerialPort.Parity">
            <summary>
            Gets or sets the parity-checking protocol.
            </summary>
        </member>
        <member name="P:SerialPortNET.SerialPort.PortName">
            <summary>
            Gets or sets the port for communications, including but not limited to all available COM ports.
            </summary>
        </member>
        <member name="P:SerialPortNET.SerialPort.ReceivedBytesThreshold">
            <summary>
            Gets or sets the number of bytes in the internal input buffer before a <see cref="E:SerialPortNET.SerialPort.DataReceived"/> event occurs.
            </summary>
        </member>
        <member name="F:SerialPortNET.SerialPort.Async">
            <summary>
            Set to true for asynchronous (event based) operation.
            </summary>
        </member>
        <member name="T:SerialPortNET.DtrControl">
            <summary>
            DTR line and handshaking control
            </summary>
        </member>
        <member name="F:SerialPortNET.DtrControl.Disable">
            <summary>
            Disables the DTR line when the device is opened and leaves it disabled.
            </summary>
        </member>
        <member name="F:SerialPortNET.DtrControl.Enable">
            <summary>
            Enables the DTR line when the device is opened and leaves it on.
            </summary>
        </member>
        <member name="F:SerialPortNET.DtrControl.Handshake">
            <summary>
            Enables DTR handshaking. If handshaking is enabled, it is an error for the application to adjust the line by
            using the EscapeCommFunction function.
            </summary>
        </member>
        <member name="F:SerialPortNET.ECreationDisposition.New">
            <summary>
            Creates a new file. The function fails if a specified file exists.
            </summary>
        </member>
        <member name="F:SerialPortNET.ECreationDisposition.CreateAlways">
            <summary>
            Creates a new file, always.
            If a file exists, the function overwrites the file, clears the existing attributes, combines the specified file attributes,
            and flags with FILE_ATTRIBUTE_ARCHIVE, but does not set the security descriptor that the SECURITY_ATTRIBUTES structure specifies.
            </summary>
        </member>
        <member name="F:SerialPortNET.ECreationDisposition.OpenExisting">
            <summary>
            Opens a file. The function fails if the file does not exist.
            </summary>
        </member>
        <member name="F:SerialPortNET.ECreationDisposition.OpenAlways">
            <summary>
            Opens a file, always.
            If a file does not exist, the function creates a file as if dwCreationDisposition is CREATE_NEW.
            </summary>
        </member>
        <member name="F:SerialPortNET.ECreationDisposition.TruncateExisting">
            <summary>
            Opens a file and truncates it so that its size is 0 (zero) bytes. The function fails if the file does not exist.
            The calling process must open the file with the GENERIC_WRITE access right.
            </summary>
        </member>
        <member name="F:SerialPortNET.EFileShare.None">
             <summary>
            
             </summary>
        </member>
        <member name="F:SerialPortNET.EFileShare.Read">
            <summary>
            Enables subsequent open operations on an object to request read access.
            Otherwise, other processes cannot open the object if they request read access.
            If this flag is not specified, but the object has been opened for read access, the function fails.
            </summary>
        </member>
        <member name="F:SerialPortNET.EFileShare.Write">
            <summary>
            Enables subsequent open operations on an object to request write access.
            Otherwise, other processes cannot open the object if they request write access.
            If this flag is not specified, but the object has been opened for write access, the function fails.
            </summary>
        </member>
        <member name="F:SerialPortNET.EFileShare.Delete">
            <summary>
            Enables subsequent open operations on an object to request delete access.
            Otherwise, other processes cannot open the object if they request delete access.
            If this flag is not specified, but the object has been opened for delete access, the function fails.
            </summary>
        </member>
        <member name="T:SerialPortNET.EIOControlCode">
            <summary>
            IO Control Codes
            Useful links:
                http://www.ioctls.net/
                http://msdn.microsoft.com/en-us/library/windows/hardware/ff543023(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:SerialPortNET.Parity">
            <summary>
            Specifies the parity bit for a <see cref="T:SerialPortNET.SerialPort"/> object.
            </summary>
        </member>
        <member name="F:SerialPortNET.Parity.None">
            <summary>
            No parity check occurs.
            </summary>
        </member>
        <member name="F:SerialPortNET.Parity.Odd">
            <summary>
            Sets the parity bit so that the count of bits set is an odd number.
            </summary>
        </member>
        <member name="F:SerialPortNET.Parity.Even">
            <summary>
            Sets the parity bit so that the count of bits set is an even number.
            </summary>
        </member>
        <member name="F:SerialPortNET.Parity.Mark">
            <summary>
            Leaves the parity bit set to 1.
            </summary>
        </member>
        <member name="F:SerialPortNET.Parity.Space">
            <summary>
            Leaves the parity bit set to 0.
            </summary>
        </member>
        <member name="T:SerialPortNET.RtsControl">
            <summary>
            RTS line control
            </summary>
        </member>
        <member name="F:SerialPortNET.RtsControl.Disable">
            <summary>
            Disables the RTS line when the device is opened and leaves it disabled.
            </summary>
        </member>
        <member name="F:SerialPortNET.RtsControl.Enable">
            <summary>
            Enables the RTS line when the device is opened and leaves it on.
            </summary>
        </member>
        <member name="F:SerialPortNET.RtsControl.Handshake">
            <summary>
            Enables RTS handshaking. The driver raises the RTS line when the "type-ahead" (input) buffer
            is less than one-half full and lowers the RTS line when the buffer is more than
            three-quarters full. If handshaking is enabled, it is an error for the application to
            adjust the line by using the EscapeCommFunction function.
            </summary>
        </member>
        <member name="F:SerialPortNET.RtsControl.Toggle">
            <summary>
            Specifies that the RTS line will be high if bytes are available for transmission. After
            all buffered bytes have been sent, the RTS line will be low.
            </summary>
        </member>
        <member name="T:SerialPortNET.StopBits">
            <summary>
            Specifies the number of stop bits used on the <see cref="T:SerialPortNET.SerialPort"/> object.
            </summary>
        </member>
        <member name="F:SerialPortNET.StopBits.One">
            <summary>
            One stop bit is used.
            </summary>
        </member>
        <member name="F:SerialPortNET.StopBits.OnePointFive">
            <summary>
            1.5 stop bits are used.
            </summary>
        </member>
        <member name="F:SerialPortNET.StopBits.Two">
            <summary>
            Two stop bits are used.
            </summary>
        </member>
    </members>
</doc>
